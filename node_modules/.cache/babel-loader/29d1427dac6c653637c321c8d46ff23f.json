{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst UseWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [usedKeys, setUsedKeys] = useState();\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedArray = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    });\n    formattedArray.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedArray[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    });\n    formattedArray.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedArray[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedArray;\n  };\n\n  const addNewGuesses = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setUsedKeys(prevUsedKeys => {\n      let newKeys = [...prevUsedKeys];\n      formattedGuess.forEach(l => {\n        newKeys;\n      });\n    });\n    setCurrentGuess('');\n  };\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log('your have used all your lifes.');\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log('you have already entered that guess');\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log('please enter the word of length five');\n        return;\n      }\n\n      const formated = formatGuess();\n      addNewGuesses(formated);\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(UseWordle, \"JOGOfPw9Jp6H3k4q/P4d76ECdyA=\");\n\n_c = UseWordle;\nexport default UseWordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseWordle\");","map":{"version":3,"sources":["/home/anand/Downloads/React-Wordle/src/hooks/useWordle.js"],"names":["useState","UseWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","formatGuess","solutionArray","formattedArray","map","l","key","color","forEach","i","includes","indexOf","addNewGuesses","formattedGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","newKeys","handleKeyUp","console","log","length","formated","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\n\nconst UseWordle = (solution) => {\n\n    const [turn, setTurn] = useState(0) \n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n    const [usedKeys,setUsedKeys] = useState();\n\n    const formatGuess = ()=>{\n        let solutionArray = [...solution];\n        let formattedArray = [...currentGuess].map((l)=>{\n             return {key:l , color:'grey'}\n        })\n\n        formattedArray.forEach((l,i) => {\n            if (solutionArray[i] === l.key) {\n                formattedArray[i].color = 'green'\n                solutionArray[i] = null\n            }   \n        });\n\n        formattedArray.forEach((l,i) => {\n            if (solutionArray.includes(l.key) && l.color !== 'green') {\n                formattedArray[i].color ='yellow'\n                solutionArray[solutionArray.indexOf(l.key)] = null\n\n            }\n        });\n        return formattedArray;\n    }\n\n    const addNewGuesses = (formattedGuess) => { \n        if (currentGuess === solution) {\n            setIsCorrect(true);\n        }\n        setGuesses((prevGuesses)=>{\n            let newGuesses = [...prevGuesses];\n            newGuesses[turn] = formattedGuess;\n            return newGuesses;\n        })\n        setHistory((prevHistory)=>{\n            return [...prevHistory,currentGuess];\n        })\n        setTurn((prevTurn)=>{\n            return prevTurn + 1;\n        })\n        setUsedKeys((prevUsedKeys)=>{\n            let newKeys = [...prevUsedKeys];\n            formattedGuess.forEach((l) => {\n                newKeys\n            });\n        })\n        setCurrentGuess('');\n    }\n\n    const handleKeyUp = ({key}) => { \n\n        if (key === \"Enter\") {\n            if (turn>5) {\n                console.log('your have used all your lifes.');\n                return\n            }\n            if (history.includes(currentGuess)) {\n                console.log('you have already entered that guess');\n                return\n            }\n            if (currentGuess.length!==5) {\n                console.log('please enter the word of length five');\n                return\n            }\n           const formated = formatGuess();\n           addNewGuesses(formated);\n            \n        }\n\n        if (key === \"Backspace\") {\n            setCurrentGuess((prev)=>{\n                return prev.slice(0,-1);\n            })\n            return\n        }\n\n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length<5) {\n                setCurrentGuess((prev)=>{\n                    return prev + key;\n                })\n            }\n        }\n\n      }\n\n      return {turn,currentGuess,guesses,isCorrect,handleKeyUp}\n    \n}\n \nexport default UseWordle;"]},"metadata":{},"sourceType":"module"}
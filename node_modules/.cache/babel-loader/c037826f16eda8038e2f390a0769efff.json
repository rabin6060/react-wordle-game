{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst UseWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState(['ninja']); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedArray = [...currentGuess].map(l => {\n      return {\n        key: 'l',\n        color: 'grey'\n      };\n    });\n    formattedArray.forEach(l, i => {\n      if (solutionArray[i] === formattedArray) {}\n    });\n  };\n\n  const addNewGuesses = () => {};\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log('your have used all your lifes.');\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log('you have already entered that guess');\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log('please enter the word of length five');\n        return;\n      }\n\n      formatGuess();\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(UseWordle, \"r373pEiS+aFS5zIH5pA4PwIp20I=\");\n\n_c = UseWordle;\nexport default UseWordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseWordle\");","map":{"version":3,"sources":["/home/anand/Downloads/React-Wordle/src/hooks/useWordle.js"],"names":["useState","UseWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedArray","map","l","key","color","forEach","i","addNewGuesses","handleKeyUp","console","log","includes","length","prev","slice","test"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AACA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAE5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAJ4B,CAIe;;AAC3C,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAC,OAAD,CAAD,CAAtC,CAL4B,CAKsB;;AAClD,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAI;AACpB,QAAIC,aAAa,GAAG,CAAC,GAAGZ,QAAJ,CAApB;AACA,QAAIa,cAAc,GAAG,CAAC,GAAGV,YAAJ,EAAkBW,GAAlB,CAAuBC,CAAD,IAAK;AAC3C,aAAO;AAACC,QAAAA,GAAG,EAAC,GAAL;AAAWC,QAAAA,KAAK,EAAC;AAAjB,OAAP;AACJ,KAFoB,CAArB;AAIAJ,IAAAA,cAAc,CAACK,OAAf,CAAuBH,CAAvB,EAAyBI,CAAC,IAAI;AAC1B,UAAIP,aAAa,CAACO,CAAD,CAAb,KAAqBN,cAAzB,EAAyC,CAExC;AAEJ,KALD;AAMH,GAZD;;AAcA,QAAMO,aAAa,GAAG,MAAM,CAE1B,CAFF;;AAIA,QAAMC,WAAW,GAAG,QAAW;AAAA,QAAV;AAACL,MAAAA;AAAD,KAAU;;AAE3B,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACjB,UAAIf,IAAI,GAAC,CAAT,EAAY;AACRqB,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA;AACH;;AACD,UAAIhB,OAAO,CAACiB,QAAR,CAAiBrB,YAAjB,CAAJ,EAAoC;AAChCmB,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA;AACH;;AACD,UAAIpB,YAAY,CAACsB,MAAb,KAAsB,CAA1B,EAA6B;AACzBH,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA;AACH;;AACDZ,MAAAA,WAAW;AAEd;;AAED,QAAIK,GAAG,KAAK,WAAZ,EAAyB;AACrBZ,MAAAA,eAAe,CAAEsB,IAAD,IAAQ;AACpB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,CAAC,CAAd,CAAP;AACH,OAFc,CAAf;AAGA;AACH;;AAED,QAAI,aAAaC,IAAb,CAAkBZ,GAAlB,CAAJ,EAA4B;AACxB,UAAIb,YAAY,CAACsB,MAAb,GAAoB,CAAxB,EAA2B;AACvBrB,QAAAA,eAAe,CAAEsB,IAAD,IAAQ;AACpB,iBAAOA,IAAI,GAAGV,GAAd;AACH,SAFc,CAAf;AAGH;AACJ;AAEF,GAlCH;;AAoCE,SAAO;AAACf,IAAAA,IAAD;AAAME,IAAAA,YAAN;AAAmBE,IAAAA,OAAnB;AAA2BI,IAAAA,SAA3B;AAAqCY,IAAAA;AAArC,GAAP;AAEL,CAhED;;GAAMtB,S;;KAAAA,S;AAkEN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\"\nconst UseWordle = (solution) => {\n\n    const [turn, setTurn] = useState(0) \n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([]) // each guess is an array\n    const [history, setHistory] = useState(['ninja']) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = ()=>{\n        let solutionArray = [...solution];\n        let formattedArray = [...currentGuess].map((l)=>{\n             return {key:'l' , color:'grey'}\n        })\n\n        formattedArray.forEach(l,i => {\n            if (solutionArray[i] === formattedArray) {\n                \n            }\n            \n        });\n    }\n\n    const addNewGuesses = () => { \n\n     }\n\n    const handleKeyUp = ({key}) => { \n\n        if (key === \"Enter\") {\n            if (turn>5) {\n                console.log('your have used all your lifes.');\n                return\n            }\n            if (history.includes(currentGuess)) {\n                console.log('you have already entered that guess');\n                return\n            }\n            if (currentGuess.length!==5) {\n                console.log('please enter the word of length five');\n                return\n            }\n            formatGuess();\n            \n        }\n\n        if (key === \"Backspace\") {\n            setCurrentGuess((prev)=>{\n                return prev.slice(0,-1);\n            })\n            return\n        }\n\n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length<5) {\n                setCurrentGuess((prev)=>{\n                    return prev + key;\n                })\n            }\n        }\n\n      }\n\n      return {turn,currentGuess,guesses,isCorrect,handleKeyUp}\n    \n}\n \nexport default UseWordle;"]},"metadata":{},"sourceType":"module"}
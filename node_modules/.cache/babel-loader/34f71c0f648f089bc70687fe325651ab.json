{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst UseWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {};\n\n  const addNewGuesses = () => {};\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Backspace\") {\n      setCurrentGuess;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(UseWordle, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\n\n_c = UseWordle;\nexport default UseWordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseWordle\");","map":{"version":3,"sources":["/home/anand/Downloads/React-Wordle/src/hooks/useWordle.js"],"names":["useState","UseWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","addNewGuesses","handleKeyUp","key","test","length","prev"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AACA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAE5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAJ4B,CAIe;;AAC3C,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CAL4B,CAKe;;AAC3C,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAI,CAEvB,CAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM,CAE1B,CAFF;;AAIC,QAAMC,WAAW,GAAG,QAAW;AAAA,QAAV;AAACC,MAAAA;AAAD,KAAU;;AAE5B,QAAIA,GAAG,KAAK,WAAZ,EAAyB;AACrBV,MAAAA,eAAe;AAClB;;AAED,QAAI,aAAaW,IAAb,CAAkBD,GAAlB,CAAJ,EAA4B;AACxB,UAAIX,YAAY,CAACa,MAAb,GAAoB,CAAxB,EAA2B;AACvBZ,QAAAA,eAAe,CAAEa,IAAD,IAAQ;AACpB,iBAAOA,IAAI,GAAGH,GAAd;AACH,SAFc,CAAf;AAGH;AACJ;AAEF,GAdF;;AAgBC,SAAO;AAACb,IAAAA,IAAD;AAAME,IAAAA,YAAN;AAAmBE,IAAAA,OAAnB;AAA2BI,IAAAA,SAA3B;AAAqCI,IAAAA;AAArC,GAAP;AAEL,CAlCD;;GAAMd,S;;KAAAA,S;AAoCN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\"\nconst UseWordle = (solution) => {\n\n    const [turn, setTurn] = useState(0) \n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = ()=>{\n\n    }\n\n    const addNewGuesses = () => { \n\n     }\n\n     const handleKeyUp = ({key}) => { \n\n        if (key === \"Backspace\") {\n            setCurrentGuess\n        }\n\n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length<5) {\n                setCurrentGuess((prev)=>{\n                    return prev + key;\n                })\n            }\n        }\n\n      }\n\n      return {turn,currentGuess,guesses,isCorrect,handleKeyUp}\n    \n}\n \nexport default UseWordle;"]},"metadata":{},"sourceType":"module"}
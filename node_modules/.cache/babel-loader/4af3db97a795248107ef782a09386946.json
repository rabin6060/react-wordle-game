{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false); // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    }); // find any yellow letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  }; // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n\n\n  const addNewGuess = () => {}; // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!');\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.');\n        return;\n      } // check word is 5 chars\n\n\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.');\n        return;\n      }\n\n      const formatted = formatGuess();\n      console.log(formatted);\n    }\n\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key);\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/anand/Downloads/React-Wordle/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","handleKeyup","console","log","length","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0) \n  const [currentGuess, setCurrentGuess] = useState('')\n  const [guesses, setGuesses] = useState([]) // each guess is an array\n  const [history, setHistory] = useState([]) // each guess is a string\n  const [isCorrect, setIsCorrect] = useState(false)\n\n  // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n  const formatGuess = () => {\n    let solutionArray = [...solution]\n    let formattedGuess = [...currentGuess].map((l) => {\n      return {key: l, color: 'grey'}\n    })\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'green'\n        solutionArray[i] = null\n      }\n    })\n    \n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow'\n        solutionArray[solutionArray.indexOf(l.key)] = null\n      }\n    })\n\n    return formattedGuess\n  }\n\n  // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n  const addNewGuess = () => {\n\n  }\n\n  // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n  const handleKeyup = ({ key }) => {\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!')\n        return\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.')\n        return\n      }\n      // check word is 5 chars\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.')\n        return\n      }\n      const formatted = formatGuess()\n      console.log(formatted)\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1))\n      return\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key)\n      }\n    }\n  }\n\n  return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}